/**
 * 剑指 Offer 60. n个骰子的点数
 * 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
 * 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
 *
 * 示例 1:
 * 输入: 1
 * 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
 *
 * 示例 2:
 * 输入: 2
 * 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 *
 * 限制：
 * 1 <= n <= 11
 *
 * @author: Song Ningning
 * @date: 2020-07-10 22:57
 */
public class Solution2 {
    /**
     * 动态规划（状态压缩）
     */
    public double[] twoSum(int n) {
        // n 个骰子，投出来最大数是 6*n
        int[] dp = new int[6 * n + 1];
        // 初始化 1 个骰子的情况
        for (int s = 1; s <= 6; s++) {
            dp[s] = 1;
        }
        // 骰子的个数
        for (int i = 2; i <= n; i++) {
            // 可能会出现的点数之和
            for (int s = 6 * i; s >= i; s--) {
                // 把原先存放的 i-1 个骰子的数据置 0
                dp[s] = 0;
                // 当前这个骰子可能掷出的点数
                for (int k = 1; k <= 6; k++) {
                    // i-1 个骰子点数和的最小值就是 i-1
                    if (s - k < i - 1) {
                        break;
                    }
                    dp[s] += dp[s - k];
                }
            }
        }
        // 所有可能情况
        double total = Math.pow(6, n);
        // n 个骰子，出现的点数和的范围为 [n...6*n]
        double[] res = new double[5 * n + 1];
        for (int i = 0; i < res.length; i++) {
            res[i] = (dp[n + i]) / total;
        }
        return res;
    }
}
