/**
 * 剑指 Offer 60. n个骰子的点数
 * 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
 * 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
 *
 * 示例 1:
 * 输入: 1
 * 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
 *
 * 示例 2:
 * 输入: 2
 * 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 *
 * 限制：
 * 1 <= n <= 11
 *
 * @author: Song Ningning
 * @date: 2020-07-10 22:57
 */
public class Solution1 {
    /**
     * 动态规划
     *
     * n 个骰子，一共有 6^n 种情况。只需要找到 n 个骰子，每种点数和出现的次数即可。
     *
     * dp[i][s] 表示 i 个骰子，出现点数之和为 s 的次数
     *
     * n = 1, 和为 s 的情况有 F(n,s) = 1，s=1,2,3,4,5,6
     * n > 1 , 和为 s 的情况有 F(n,s) = F(n-1,s-1) + F(n-1,s-2) + F(n-1,s-3) + F(n-1,s-4) + F(n-1,s-5) + F(n-1,s-6)
     * 即 当前 n 个骰子出现的点数之和 s 等于这一次出现的点数（1...6）加上前 n-1 个骰子出现的点数 s-1、s-2、s-3、s-4、s-5、s-6 之和
     *
     */
    public double[] twoSum(int n) {
        // n 个骰子，投出来最大数是 6*n
        int[][] dp = new int[n + 1][6 * n + 1];
        // 初始化 1 个骰子的情况
        for (int s = 1; s <= 6; s++) {
            dp[1][s] = 1;
        }
        // 骰子的个数
        for (int i = 2; i <= n; i++) {
            // 可能会出现的点数之和
            for (int s = i; s <= 6 * i; s++) {
                // 当前这个骰子可能掷出的点数
                for (int k = 1; k <= 6; k++) {
                    if (s - k >= 1) {
                        dp[i][s] += dp[i - 1][s - k];
                    }
                }
            }
        }
        // 所有可能情况
        double total = Math.pow(6, n);
        // n 个骰子，出现的点数和的范围为 [n...6*n]
        double[] res = new double[5 * n + 1];
        for (int i = 0; i < res.length; i++) {
            res[i] = (dp[n][n + i]) / total;
        }
        return res;
    }
}
