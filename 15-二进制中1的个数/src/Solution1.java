/**
 * 面试题15. 二进制中1的个数
 * 请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。
 * 例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
 *
 * 注意：本题与力扣 191 题相同：https://leetcode-cn.com/problems/number-of-1-bits/
 *
 * @Author: Song Ningning
 * @Date: 2020-05-29 16:00
 */
public class Solution1 {

    // you need to treat n as an unsigned value
    public static int hammingWeight(int n) {

        /*
         * 逐位判断
         *
         * 1 & n == 0, n 的二进制最右一位为 0;
         * 1 & n == 1, n 的二进制最右一位为 1.
         * 因此可以将 n 与 1 做 & 运算，n 一直往右移，直到 n == 0，记录结果为 1 的次数。
         *
         * 以下摘自力扣：
         * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
         * 并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
         * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
         *
         * 示例 3：
         * 输入：11111111111111111111111111111101
         * 输出：31
         * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
         *
         * 因此循环条件是 n != 0，不能是 n > 0
         * 为了避免这种情况，可以保持 n 不变，将 1 一直左移一位
         */


        // int count = 0;
        // while (n != 0) {
        //     if ((n & 1) == 1) {
        //         count++;
        //     }
        //     n >>>= 1;
        // }
        // return count;

        int count = 0;
        int mask = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & mask) != 0) {
                count++;
            }
            mask <<= 1;
        }
        return count;
    }

}
