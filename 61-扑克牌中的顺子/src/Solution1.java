import java.util.Arrays;

/**
 * 剑指 Offer 61. 扑克牌中的顺子
 * 从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。
 * 2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。
 *
 * 示例 1:
 * 输入: [1,2,3,4,5]
 * 输出: True
 *
 * 示例 2:
 * 输入: [0,0,1,2,5]
 * 输出: True
 *
 * 限制：
 * 数组长度为 5
 * 数组的数取值为 [0, 13]
 *
 * @author: Song Ningning
 * @date: 2020-07-11 9:24
 */
public class Solution1 {

    /**
     * 排序 + 遍历
     *
     * 题目中说明了只有 5 张牌，5 张牌组成顺子，肯定不能有重复的牌（不考虑大小王）；
     * 而且 5 张牌组成顺子，最大牌 - 最小牌 < 5。
     * 因此总共有三种情况：
     *     A B C D E
     *     0 A B C D
     *     0 0 A B C
     * 可以看出，如果牌都不重复（不考虑大小王），且满足 最大牌 - 最小牌 < 5，则能够组成顺子。
     *
     * 可以先对数组 nums 排序，最大牌 max 就是排序后最后一个元素，如果有大小王肯定排在数组起始位置，
     * 大小王数量为 count，那么除去大小王外，最小的牌 min 就是 nums[count]，由此找到了最大值和最小值；
     * 判重的话就用 当前元素和后一个元素比较即可。
     *
     * 时间复杂度：O(NlogN) = O(5log5) = O(1)
     * 空间复杂度：O(1)
     */
    public boolean isStraight(int[] nums) {
        int jokers = 0; // 记录大小王数量
        Arrays.sort(nums); // 数组排序
        for (int i = 0; i < 4; i++) {
            if (nums[i] == 0) { // 统计大小王数量
                jokers++;
            } else if (nums[i] == nums[i + 1]) { // 如果有重复的直接返回
                return false;
            }
        }
        return nums[4] - nums[jokers] < 5; // 最大牌 - 最小牌 < 5 则可构成顺子
    }
}
